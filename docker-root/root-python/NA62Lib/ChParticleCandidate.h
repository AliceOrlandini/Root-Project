//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Thu Jul 18 20:06:36 2024 by ROOT version 6.32.02)
//      from the StreamerInfo in file outFile.root
//////////////////////////////////////////////////////////


#ifndef ChParticleCandidate_h
#define ChParticleCandidate_h
class ChParticleCandidate;

#include "Rtypes.h"
#include "TObject.h"
#include "Riostream.h"
#include <vector>
#include "UpstreamTrack.h"
#include "TVector3.h"

class ChParticleCandidate : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   vector<UpstreamTrack*> fUpstreamTracks;    //Using KTAG and RICH ASS time (Brizioli-Jacopo association type)
   vector<UpstreamTrack*> fUpstreamTracksG;    //Using CHOD ASS time (Giusseppe association type)
   vector<UpstreamTrack*> fUpstreamTracksRICH;    //Using RICH ASS time (Giusseppe association type)
   vector<UpstreamTrack*> fUpstreamTracksKTAG;    //Using KTAG for the track reconstruction, RICH ASS time (Giusseppe association type)
   int                    fAcceptance;            //Track acceptance in kRICH, kNewCHOD, kLKr, kCHOD, kMUV1,2,3, kSpectrometer, !kIRC
   int                    fCharge;                //Electric charge (+1 or -1)
   float                  fTrackTime;             //ChParticleCandidate Track time (STRAW Track cand time)
   float                  fAssCHODTime;           //Track Associated CHOD time (-999999999 if not there)
   float                  fAssRICHJurTime;        //Track Associated RICH Ring Time in the MostLikelyHypothesis (-999999999 if not there) Jurgen Version
   float                  fAssNewCHODTime;        //NewCHOD Associated Time with CHOD
   float                  fWeightedTime;          //event time using all the detector associated and weighted
   float                  fAssMUV3CHODTimeBefore;    //MUV3 association Time with CHOD with MUV3 - CHOD < 0
   float                  fAssMUV3CHODTimeAfter;     //MUV3 association Time with CHOD with MUV3 - CHOD > 0
   float                  fAssMUV3RICHTimeBefore;    //MUV3 association Time with RICH with MUV3 - CHOD < 0
   float                  fAssMUV3RICHTimeAfter;     //MUV3 association Time with RICH with MUV3 - CHOD > 0
   float                  fTagBestUpstreamTrackAss;    //n of best upstreamtrack associated with CHOD
   float                  fTagBestUpstreamTrackAssG;    //n of best upstreamtrack associated with CHOD by Giuseppe
   float                  fTagBestUpstreamTrackAssRICH;    //n of best upstreamtrack associated with RICH
   float                  fTagBestUpstreamTrackAssKTAG;    //n of best upstreamtrack associated with RICH
   float                  fKTAGAssBestGTKTime;             //time of KTAG associated to the best GTK tracks (jacopo association)
   float                  fKTAGAssCHODTime;                //time of KTAG associated to the CHOD (downstream track)
   float                  fKTAGAssCHOD5SectorTime;         //time of KTAG with at lest 5 sector associated to the CHOD (downstream track)
   float                  fKTAGAssRICHTime;                //time of KTAG associated to the RICH
   float                  fKTAGAssRICH5SectorTime;         //time of KTAG with at lest 5 sector associated to the RICH
   int                    fKTAGAssBestGTKNSectors;         //Num sector of KTAG associated to the best GTK tracks (Jacopo association type)
   int                    fKTAGAssCHODNSectors;            //Num sector of KTAG associated to the CHOD (downstream track)
   int                    fKTAGAssRICHNSectors;            //Num sector of KTAG associated to the RICH
   TVector3               fMomentum;                       //Track momentum befor magnet
   TVector3               fMomentumBT;                     //Track momentum after Blue tube correction
   float                  fVertexBTChi2;                   //chi2 blue tube vertex best upstream track ass
   TVector3               fVertexBT;                       //Track-best upstream track vertex after Blue tube correction
   float                  fDiscriminant1;                  //discriminant best GTK track matching (Brizioli-Jacopo association type)
   float                  fDiscriminant2;                  //discriminant second best GTK track matching (Brizioli-Jacopo association type)
   float                  fGTKAssTime;                     //time of associated GTK to the tracks
   int                    fNGTKTrackAss;                   //N associated GTK to the tracks brizioli-pinzino
   TVector3               fMomentumGTK;                    //Upstream Track momentum
   float                  fCDA;                            //CDA best upstream track ass
   TVector3               fVertex;                         //Track-best upstream track vertex
   int                    fNGTKTrackAssG;                  //N associated GTK to the tracks (Giusseppe association type with CHOD)
   int                    fNGTKInTimeG;                    //N GTK in time (inside 0.6 ns from KTAG) (Giusseppe association type with CHOD)
   float                  fGTKAssTimeG;                    //time of associated GTK to the tracks (Giusseppe association type with CHOD)
   TVector3               fMomentumGTKG;                   //Upstream Track momentum (Giusseppe association type with CHOD)
   float                  fCDAG;                           //CDA best upstream track ass  (Giusseppe association type with CHOD)
   TVector3               fVertexG;                        //Track-best upstream track vertex (Giusseppe association type with CHOD)
   float                  fDiscriminant1G;                 //discriminant KTAG-GTK  (Giusseppe association type with CHOD)
   float                  fDiscriminant2G;                 //discriminant CHOD-GTK  (Giusseppe association type with CHOD)
   int                    fNGTKTrackAssRICH;               //N associated GTK to the tracks (Giusseppe association type with RICH)
   int                    fNGTKInTimeRICH;                 //N GTK in time (inside 0.6 ns from KTAG) (Giusseppe association type with RICH)
   float                  fGTKAssTimeRICH;                 //time of associated GTK to the tracks (Giusseppe association type with RICH)
   TVector3               fMomentumGTKRICH;                //Upstream Track momentum (Giusseppe association type with RICH)
   float                  fCDARICH;                        //CDA best upstream track ass (Giusseppe association type with RICH)
   TVector3               fVertexRICH;                     //Track-best upstream track vertex (Giusseppe association type with RICH)
   float                  fDiscriminant1RICH;              //discriminant KTAG-GTK  (Giusseppe association type with RICH)
   float                  fDiscriminant2RICH;              //discriminant RICH-GTK  (Giusseppe association type with RICH)
   int                    fNGTKTrackAssKTAG;               //N associated GTK to the tracks (Giusseppe association type with RICH)
   int                    fNGTKInTimeKTAG;                 //N GTK in time (inside 0.6 ns from KTAG) (Giusseppe association type with RICH)
   float                  fGTKAssTimeKTAG;                 //time of associated GTK to the tracks (Giusseppe association type with RICH)
   TVector3               fMomentumGTKKTAG;                //Upstream Track momentum (Giusseppe association type with RICH)
   float                  fCDAKTAG;                        //CDA best upstream track ass (Giusseppe association type with RICH)
   TVector3               fVertexKTAG;                     //Track-best upstream track vertex (Giusseppe association type with RICH)
   float                  fDiscriminant1KTAG;              //discriminant KTAG-GTK  (Giusseppe association type with RICH)
   float                  fDiscriminant2KTAG;              //discriminant RICH-GTK  (Giusseppe association type with RICH)
   TVector3               fMomentumAfterMagnet;            //Three-momentum after magnet
   TVector3               fPositionBeforeMagnet;           //A point along the trajectory before magnet
   TVector3               fPositionAfterMagnet;            //A point along the trajectory after magnet
   double                 fCovariance[5][5];               //Covariance matrix provided by the fit (slopes, positions, momentum -> thetaXY, XY, P)
   int                    fNChamber;                       //n chamber used for the track
   int                    fCaloClusterAss;                 //Aliberti calorimeter cluster association
   float                  fClusterMeanTime;                //average time cluster (LKr MUV1 MUV2)
   float                  fClusterLKrTime;                 //LKr time cluster
   float                  fClusterMuv1Time;                //MUV1 time cluster
   float                  fClusterMuv2Time;                //MUV2 time cluster
   double                 fClusterTotalEnergy;             //cluster total energy (LKr MUV1 MUV2)
   double                 fClusterLKrEnergy;               //LKr time cluster
   double                 fClusterLKrSeedEnergy;           //LKr cluster seed Energy
   int                    fClusterLKrNcells;               //LKr cluster number of Cells
   double                 fClusterMuv1Energy;              //MUON1 time cluster
   double                 fClusterMuv2Energy;              //MUV2 time cluster
   double                 fClusterMUV1OuterEnergy;         //MUV1 Outer Energy
   double                 fClusterMUV2OuterEnergy;         //MUV2 Outer Energy
   float                  fLKrClusterX;                    //x coordinate of the geometrically closest LKr cluster
   float                  fLKrClusterY;                    //y coordinate of the geometrically closest LKr cluster
   double                 fTimeLKr;                        //LKr Time
   double                 fTimeMUV1;                       //MUV1 Time
   double                 fTimeMUV2;                       //MUV2 Time
   double                 fEnergyLKr;                      //LKr Energy
   double                 fEnergyMUV1;                     //MUV1 Energy
   double                 fEnergyMUV2;                     //MUV2 Energy
   double                 fEnergyCAL;                      //Total Energy (LKr + MUV1 + MUV2)
   float                  fEop;                            //Particle eop
   double                 fElectronRingRadius;             //RICH electron Radius using Burst and run information
   float                  fRICHJurRingRadius;              //RICH Ring Radius track Jurgen version
   float                  fRICHJurRingCentrePosX;          //RICH Ring centre X track Jurgen version
   float                  fRICHJurRingCentrePosY;          //RICH Ring centre Y track Jurgen version
   float                  fRICHTrkSeededNHits;             //RICH Ring NHits track seeded version
   float                  fRICHTrkSeededRadius;            //RICH Ring Radius track seeded version
   float                  fRICHTrkSeededCentrePosX;        //RICH Ring centre X track seeded version
   float                  fRICHTrkSeededCentrePosY;        //RICH Ring centre Y track seeded version
   float                  fRICHTrkSeededTime;              //RICH Ring Time track seeded version
   float                  fRICHTrkSeededMass;              //RICH Ring Mass track seeded version
   float                  fRICHTrkCentredNHits;            //RICH Ring NHits Brizioli Version
   float                  fRICHTrkCentredRadius;           //RICH Ring Radius Brizioli Version
   float                  fRICHTrkCentredCentrePosX;       //RICH Ring centre X Brizioli version
   float                  fRICHTrkCentredCentrePosY;       //RICH Ring centre Y Brizioli version
   float                  fRICHTrkCentredTime;             //RICH Ring Time Brizioli Version
   float                  fRICHTrkCentredMass;             //RICH Ring Mass Brizioli Version
   float                  fLKrElectronProbability;         //probability of ChParticleCandidate selection from LKR
   float                  fLKrMuonProbability;             //probability of ChParticleCandidate selection from LKR
   float                  fLKrPionProbability;             //probability of ChParticleCandidate selection from LKR
   float                  fRiCHElectronProbability;        //probability of ChParticleCandidate selection from RiCH
   float                  fRiCHMuonProbability;            //probability of ChParticleCandidate selection from RiCH
   float                  fRiCHPionProbability;            //probability of ChParticleCandidate selection from RiCH
   float                  fRiCHKaonProbability;            //probability of ChParticleCandidate selection from RiCH
   float                  fRiCHBackgroundProbability;      //probability of ChParticleCandidate selection from RiCH
   float                  fElectronProbabilityCombo;       //combined probability (LKR and RICH with momentum efficiency) of ChParticleCandidate selection
   float                  fMuonProbabilityCombo;           //combined probability (LKR and RICH with momentum efficiency) of ChParticleCandidate selection
   float                  fPionProbabilityCombo;           //combined probability (LKR and RICH with momentum efficiency) of ChParticleCandidate selection
   float                  fElectronProbabilityMax;         //Max probability (LKR or RICH) of ChParticleCandidate selection
   float                  fMuonProbabilityMax;             //Max probability (LKR or RICH) of ChParticleCandidate selection
   float                  fPionProbabilityMax;             //Max probability (LKR or RICH) of ChParticleCandidate selection
   float                  fTotBackgroundProbabilityMax;    //Max probability (LKR or RICH) of All possibility not pion ChParticleCandidate selection
   int                    fFlagKE4;                        //Flag for Ke4 vetoing, the bit of the flag at 1 if it found at least a cluster with those characteristic:
   int                    fsegments;                       //tracks segments in time with tracks: bit 0 (obtained with Jacopo Vertex and CHOD Time), 1 (obtained with Giuseppe Vertex and CHOD Time), 2 (obtained with Giuseppe Vertex and RICH Time)
   int                    fUpstreamBackground;             //flag for upstream backgrouns: bit 0 at least 1 hit in GTK station with ToT > 23 ns using GTK Brizioli-Jacopo selection
   int                    fGlobalLKrEnergy;                //Flag for photon veto in the LKr based on the Corvino talk in March 19 at PNN session:
   int                    fLAVMatchingCHOD;                //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns) Threshold 8
   int                    fLAVMatchingCHODTh;              //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns) Threshold 9
   int                    fSAVMatchingCHOD;                //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns)
   int                    fSAVCreamMatchingCHOD;           //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns)
   int                    fCHANTIMatchingCHOD;             //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns)
   int                    fLKrAuxClusterMatchingCHOD;      //Auxiliary Lkr cluster in time with track, the bit of the flag at 1 if it found at least a cluster with those characteristic:
   int                    fLKrStdClusterMatchingCHOD;      //Standard Lkr cluster in time with track the same bit of auxiliary
   int                    fMultiplicityCHOD;               //Multiplicity flag from CHOD TIme: bit 0,1,2,3 HASC hit inside < 2,3,4,5 ns
   int                    fLAVMatchingRICH;                //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns) Threshold 8
   int                    fLAVMatchingRICHTh;              //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns) Threshold 9
   int                    fSAVMatchingRICH;                //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns)
   int                    fSAVCreamMatchingRICH;           //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns)
   int                    fCHANTIMatchingRICH;             //each bit is a different time windows from bit 10 (-10 ns, 10 ns), 9 (-9 ns, 9 ns) and so on until bit 1 (-1 ns, 1 ns), bit 0 is (-0.5 ns, 0.5 ns)
   int                    fLKrAuxClusterMatchingRICH;      //Auxiliary LKr cluster in time with RICH (see CHOD one for bits)
   int                    fLKrStdClusterMatchingRICH;      //Standard LKr cluster in time with RICH (see CHOD one for bits)
   int                    fMultiplicityRICH;               //Multiplicity flag from RICH TIme (see CHOD one for bits)
   float                  IRCTHLH;                         //Cut THLH [ns] for IRC
   float                  IRCTLTH;                         //Cut TLTH [ns] for IRC
   float                  IRCTLLL;                         //Cut TLLL [ns] for IRC
   float                  SACTHLH;                         //Cut THLH [ns] for SAC
   float                  SACTLTH;                         //Cut TLTH [ns] for SAC
   float                  SACTLLL;                         //Cut TLLL [ns] for SAC

   ChParticleCandidate();
   ChParticleCandidate(ChParticleCandidate && ) = default;
   ChParticleCandidate &operator=(const ChParticleCandidate & );
   ChParticleCandidate(const ChParticleCandidate & );
   virtual ~ChParticleCandidate();

   ClassDef(ChParticleCandidate,2); // Generated by MakeProject.
};
#endif
